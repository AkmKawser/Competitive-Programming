#include <bits/stdc++.h>

#define VI vector<int>
#define VII vector<pair<int,int>>
#define QI queue<int>

#define ms(a,v) memset( a, v, sizeof( a ) )
#define FOR(i,a,b) for(int i = a; i <= b; ++i)
#define ROF(i,a,b) for(int i = a; i >= b; i--)
#define foreach(v, c) for( typeof( (c).begin() ) v = (c).begin(); v != (c).end(); ++v)

#define pb push_back
#define pp pair<int,int>
#define mp make_pair
#define fi first
#define se second

#define popcount __builtin_popcount
#define gcd __gcd
#define bit(n,i) ( n & ( 1 << i ) )
#define lsb(x) ( x & ( -x ) )

#define FIN(str) freopen(str,"r",stdin)
#define FOUT(str) freopen(str,"w",stdout)
#define Fin(str) ifstream(str)
#define Fout(str) ostream(str)
#define SYNC ios_base::sync_with_stdio(0);

#define ll long long
#define ull unsigned long long

inline void read( int &a )
{
    register char ch;
    a = 0;

    do
    {
        ch = getchar_unlocked();

    } while ( !isdigit( ch ) );

    do
    {
        a = a * 10 + ch - '0';
        ch = getchar_unlocked();

    } while( isdigit( ch ) );
}

inline void write( int a )
{
    char s[20];
    int i = 0;
    int sign = 1;

    if ( a < 0 )
        sign = -1,
        a = -a;

    do
    {
        s[ i++ ] = a % 10 + '0';
        a /= 10;

    } while ( a );

    i--;

    if ( sign == -1 )
        putchar_unlocked( '-' );

    while ( i >= 0 ) putchar_unlocked( s[ i-- ] );
}

const int dx[] = { -1, 0, 1, 0 };
const int dy[] = { 0, 1, 0, -1 };

const int dl[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
const int dc[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

const int INF = 2e9;
const double EPS = 1e-9;

const int Nmax = 3e5 + 2;

const int LgMax = log2(Nmax) + 1;

using namespace std;

int V[Nmax];
int N, maxim;

struct Trie
{
    int val;
    Trie *son[2];

    Trie()
    {
        son[0] = 0;
        son[1] = 0;
        val = 0;
    }
};

Trie *T = new Trie;

void insereaza( Trie *nod, int sum, int exp )
{
    if ( exp == -1 )
    {
        nod->val = sum;
        return;
    }

    bool t = ( sum & ( 1 << exp ) );

    if ( nod -> son[t] == 0 )
        nod -> son[t] = new Trie;

    insereaza ( nod -> son[t], sum, exp - 1 );
}

void query( int sum )
{
    Trie *nod = T;

    for ( int i = 31 ; i >= 0 ; --i )
    {
        bool t = ( sum & ( 1 << i ) );

        if ( nod -> son[t] )
                nod = nod -> son[t];
        else
                nod = nod -> son[t ^ 1];
    }

    if ( ( sum & nod->val ) > maxim )
    {
        maxim = sum & nod->val;
    }
}


int main()
{
    ///FIN("data.in");

    read( N );

    for ( int i = 1; i <= N; ++i )
        read( V[i] );

    insereaza( T, 0, 31 );

    for ( int i = 1; i <= N; ++i )
    {
        query( V[i] );
        insereaza( T, V[i], 31 );
    }

    write( maxim );

    return 0;
}
