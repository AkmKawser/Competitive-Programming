#include <iostream>
#include <fstream>
#include <cstring>

using namespace std;

template <const int Digits>
class BigInteger
{
public:

    int a[Digits];

    BigInteger()
    {
        memset( a, 0, sizeof( a ) );
    }

    void operator = ( const BigInteger &A )
    {
        a[0] = A.a[0];

        for ( int i = 1; i <= a[0]; ++i )
            a[i] = A.a[i];
    }

    BigInteger operator + ( const BigInteger &A ) const
    {
        BigInteger C;

        int T = 0;

        C.a[0] = max( a[0], A.a[0] );

        for ( int i = 1; i <= a[0]; ++i )
        {
            C.a[i] = a[i] + A.a[i] + T;
            T = C.a[i] / 10;
            C.a[i] %= 10;
        }

        while ( T )
        {
            C.a[ ++C.a[0] ] = T % 10;
            T /= 10;
        }

        return C;
    }

    BigInteger operator - ( const BigInteger &A ) const
    {
        BigInteger C = *this;

        int T = 0;

        for ( int i = 1; i <= C.a[0]; ++i )
        {
            C.a[i] -= ( A.a[i] + T );

            if ( C.a[i] < 0 )
                T = 1;
            else
                T = 0;

            if ( T )
                C.a[i] += 10;
        }

        while ( C.a[ C.a[0] ] == 0 ) C.a[0]--;

        return C;
    }

    BigInteger operator * ( const int &nr ) const
    {
        BigInteger A = *this;

        int T = 0;

        for ( int i = 1; i <= A.a[0]; ++i )
        {
            A.a[i] = A.a[i] * nr + T;
            T = A.a[i] / 10;
            A.a[i] %= 10;
        }

        while ( T )
        {
            A.a[ ++A.a[0] ] = T % 10;
            T /= 10;
        }

        return A;
    }

    BigInteger operator * ( const BigInteger &A ) const
    {
        BigInteger C;

        C.a[0] = a[0] + A.a[0] - 1;

        int T = 0;

        for ( int i = 1; i <= a[0]; ++i )
            for ( int j = 1; j <= A.a[0]; ++j )
                C.a[i + j - 1] += a[i] * A.a[j];

        for ( int i = 1; i <= C.a[0]; ++i )
        {
            C.a[i] += T;
            T = C.a[i] / 10;
            C.a[i] %= 10;
        }

        while ( T )
        {
            C.a[ ++C.a[0] ] = T % 10;
            T /= 10;
        }

        return C;
    }

    BigInteger operator / ( const int &nr ) const
    {
        BigInteger C = *this;

        int R = 0;

        for ( int i = C.a[0]; i >= 1; i-- )
        {
            R = R * 10 + C.a[i];
            C.a[i] = R / nr;
            R %= nr;
        }

        while ( C.a[ C.a[0] ] == 0 && C.a[0] > 0 ) C.a[0]--;

        return C;
    }

    friend istream& operator >> ( istream& stream, BigInteger &A )
    {
        string str;

        stream >> str;

        for ( int i = str.size() - 1; i >= 0; i-- )
            A.a[ ++A.a[0] ] = str[i] - '0';

        return stream;
    }

    friend ostream& operator << ( ostream &stream, const BigInteger &A )
    {
        for ( int i =  A.a[0]; i >= 1; --i )
            stream << A.a[i];

        return stream;
    }
};

int main()
{
    return 0;
}
