#include <bits/stdc++.h>

using namespace std;

class Point
{
public:

    long long x, y;

    Point() : x(0), y(0) {}

    Point(const long long _x, const long long _y) : x(_x), y(_y) {}

    bool operator < ( const Point &P ) const
    {
        if ( x != P.x )
            return x < P.x;
        else
            return y < P.y;
    }

    long long distanceToPoint( const Point &P ) const
    {
        return ( x - P.x ) * ( x - P.x ) + ( y - P.y ) * ( y - P.y );
    }

    friend istream& operator >> ( istream &stream, Point &P )
    {
        stream >> P.x >> P.y;
        return stream;
    }

    friend ostream& operator << ( ostream &stream, const Point &P )
    {
        stream << P.x << " " << P.y;
        return stream;
    }
};

long long CCW( const Point &A, const Point &B, const Point &C )
{
    return ( B.x - A.x ) * ( C.y - A.y ) -
           ( B.y - A.y ) * ( C.x - A.x );
}

vector<Point> ConvexHull( vector<Point>& Points )
{
    vector<Point> U( Points.size() ), L( Points.size() );
    int dimL = 0, dimU = 0;

    sort( Points.begin(), Points.end() );

    for ( int i = 0; i < Points.size(); ++i )
    {
        while ( dimL >= 2 && CCW( L[dimL - 2], L[dimL - 1], Points[i] ) <= 0 )
            dimL--;

        L[dimL++] = Points[i];
    }

    for ( int i = Points.size() - 1; i >= 0; i-- )
    {
        while ( dimU >= 2 && CCW( U[dimU - 2], U[dimU - 1], Points[i] ) <= 0 )
            dimU--;

        U[dimU++] = Points[i];
    }

    dimL--;
    dimU--;

    vector<Point> CH( dimL + dimU );
    int k = 0;

    for ( int i = 0; i < dimL; ++i )
        CH[k++] = L[i];

    for ( int i = 0; i < dimU; ++i )
        CH[k++] = U[i];

    return CH;
}

int main()
{
    return 0;
}
