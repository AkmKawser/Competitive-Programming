#include <bits/stdc++.h>

#define VI vector<int>
#define VII vector<pair<int,int>>
#define QI queue<int>

#define ms(a,v) memset( a, v, sizeof( a ) )
#define FOR(i,a,b) for(int i = a; i <= b; ++i)
#define ROF(i,a,b) for(int i = a; i >= b; i--)
#define foreach(v, c) for( typeof( (c).begin() ) v = (c).begin(); v != (c).end(); ++v)

#define pb push_back
#define pp pair<int,int>
#define mp make_pair
#define fi first
#define se second

#define popcount __builtin_popcount
#define gcd __gcd
#define bit(n,i) ( n & ( 1LL << i ) )
#define lsb(x) ( x & ( -x ) )

#define FIN(str) freopen(str,"r",stdin)
#define FOUT(str) freopen(str,"w",stdout)
#define Fin(str) ifstream(str)
#define Fout(str) ostream(str)
#define SYNC ios_base::sync_with_stdio(0);

#define ll long long
#define ull unsigned long long

inline void read( int &a )
{
    register char ch;
    a = 0;
    int sign = 1;

    do
    {
        ch = getchar();

    } while ( !isdigit( ch ) && ch != '-' );

    if ( ch == '-' )
    {
        sign = -1;
        ch = getchar();
    }

    do
    {
        a = a * 10 + ch - '0';
        ch = getchar();

    } while( isdigit( ch ) );

    a *= sign;
}

inline void write( int a )
{
    char s[20];
    int i = 0;
    int sign = 1;

    if ( a < 0 )
        sign = -1,
        a = -a;

    do
    {
        s[ i++ ] = a % 10 + '0';
        a /= 10;

    } while ( a );

    i--;

    if ( sign == -1 )
        putchar( '-' );

    while ( i >= 0 ) putchar( s[ i-- ] );
}

const int dx[] = { -1, 0, 1, 0 };
const int dy[] = { 0, 1, 0, -1 };

const int dl[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
const int dc[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

const int INF = 2e9;
const double EPS = 1e-9;

const int Nmax = 1e5 + 2;

const int LgMax = log2(Nmax) + 1;

using namespace std;

const int MOD = 1000000007;

int colur[Nmax];
int vis[Nmax];
int black[Nmax], tata[Nmax];
int DP[2][Nmax];

int N, K;

VI G[Nmax];

void DFS( int nod )
{
    vis[nod] = 1;

    for ( auto x: G[nod] )
    {
        if ( !vis[x] )
        {
            vis[x] = 1;
            tata[x] = nod;
            DFS( x );
        }
    }

    if ( G[nod].size() == 0 )
    {
        if ( black[nod] == 1 )
        {
            DP[0][nod] = 0;
            DP[1][nod] = 1;
        }
        else
        {
            DP[0][nod] = 1;
            DP[1][nod] = 0;
        }
    }
    else
    {
        vector <int> dp[2];
        dp[0].resize( G[nod].size() + 1 );
        dp[1].resize( G[nod].size() + 1 );

        dp[0][0] = 1;
        dp[1][0] = 0;
        int nrSons = 0;

        for ( auto x: G[nod] )
        {
            if ( tata[x] == nod )
            {
                nrSons++;
                dp[0][nrSons] = ( 1LL * dp[0][nrSons - 1] * ( DP[0][x] + DP[1][x] ) ) % MOD;
                dp[1][nrSons] = ( 1LL * dp[0][nrSons - 1] * DP[1][x] + 1LL * dp[1][nrSons - 1] * ( DP[0][x] + DP[1][x] ) ) % MOD;
            }
        }

        if ( black[nod] )
        {
            DP[0][nod] = 0;
            DP[1][nod] = dp[0][nrSons];
        }
        else
        {
            DP[0][nod] = dp[0][nrSons];
            DP[1][nod] = dp[1][nrSons];
        }
    }
}

int main()
{
    ///FIN("data.in");
    ///FOUT("data.out");

    cin >> N;

    for ( int i = 0, a; i < N - 1; ++i )
    {
        cin >> a;

        int x = i + 1;
        int y = a;

        x++; y++;

        G[x].pb( y );
        G[y].pb( x );
    }

    for ( int i = 1; i <= N; ++i )
        cin >> colur[i];

    for ( int i = 1; i <= N; ++i )
    {
        if ( colur[i] )
        {
            K++;
            black[i] = 1;
        }
    }

    DFS( 1 );

    cout << DP[1][1];

    return 0;
}
